
public class PasswordChecker {
	
	/* This is a found method for checking passwords that is vulnerable to length and 
	 * timing attacks. Code is found at:
	 * http://www.pl-enthusiast.net/2016/02/26/darpa-stac-cybersecurity-research/
	 * thanks to Dr. Michael Hicks where he posted it as a publicly accessible example.
	 * It is reproduced here with slight modification to variable names. */
	private String badPassword;
	public boolean verifyPassword(String guess) {
	  for (int i = 0; i < guess.length(); i++) { 
	    if (i >= badPassword.length() || guess.charAt(i) != badPassword.charAt(i)) { 
	    	return false;
	    }
	    if (guess.length() < badPassword.length()) {
	    	return false;
	    }
	  }
	  return true;
	}
	
	
	/* This is a rewrite of the above function that will attempt to avoid timing and length attack
	 * vulnerabilities. By using only the guess' length, we do not leak any information about
	 * the length of the secret (goodPassword). And by collecting mismatches and returning only
	 * after the entire guess is checked, we do not leak any information through timing of the 
	 * method. Every attempt should have a specific runtime based only on the guess' length.
	 * It will be slower than the above method, but is more secure. */
	private String goodPassword;
	public boolean checkPassword(String guess) {
		int errorCount = 0; //Variable to collect the mismatches in guess and secret.
		for (int i = 0; i < guess.length(); i++) {
			try {
				if (guess.charAt(i) != goodPassword.charAt(i)) {
					errorCount++;
				}
			}
			catch (StringIndexOutOfBoundsException e) { /* In case the guess and secret 
														   are not same length, catch the error. */
				errorCount++;
			}
		} //This for loop will always run one loop for each char in guess. No short-circuiting.
		return errorCount == 0; //Return a boolean of the password's pass or fail.
	}
}
